<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cyy&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/f6fa6b7111bfc34aad52685714e4bf3b</icon>
  <subtitle>生命不止，折腾不息！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.cuiyy.top/"/>
  <updated>2017-12-18T02:39:35.946Z</updated>
  <id>http://blog.cuiyy.top/</id>
  
  <author>
    <name>CYY</name>
    <email>cyy6543@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(二)ReactNative图标、app名称及启动页设置</title>
    <link href="http://blog.cuiyy.top/2017/12/18/6H6ccqstKfuW1iYe/"/>
    <id>http://blog.cuiyy.top/2017/12/18/6H6ccqstKfuW1iYe/</id>
    <published>2017-12-18T02:39:35.000Z</published>
    <updated>2017-12-18T02:39:35.946Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改App图标"><a href="#修改App图标" class="headerlink" title="修改App图标"></a>修改App图标</h2><p>替换项目目录<code>android\app\src\main\res\mipmap-xxx</code>中的图片即可</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws3.sinaimg.cn/large/006tNc79ly1fmkp7lm117j30gg0ou769.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><h2 id="修改App名称"><a href="#修改App名称" class="headerlink" title="修改App名称"></a>修改App名称</h2><p>打开项目目录<code>android\app\src\main\res\valuse\strings.xml</code>,修改即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>名称<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure></p><h2 id="设置启动页"><a href="#设置启动页" class="headerlink" title="设置启动页"></a>设置启动页</h2><p>使用<a href="https://github.com/mehcode/rn-splash-screen" target="_blank" rel="external">rn-splash-screen</a>组件：<br>使用方法：<br>1、安装 <code>npm i rn-splash-screen --save</code><br>2、连接 <code>react-native link rn-splash-screen</code><br>3、在res文件中新建<code>drawable</code>文件夹，放置<code>splash.png</code>图片<br>4、修改<code>android/app/src/main/res/values/styles.xml</code>文件，添加一行：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- Base application theme. --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowBackground"</span>&gt;</span>@drawable/splash<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></div><div class="line"><span class="xml">        <span class="comment">&lt;!-- Customize your theme here. --&gt;</span></span></div><div class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div><div class="line">5.修改`android/app/src/main/AndroidManifest.xml`文件：</div><div class="line">```xml</div><div class="line"><span class="tag">&lt;<span class="name">application</span></span></div><div class="line"><span class="tag">      <span class="attr">android:name</span>=<span class="string">".MainApplication"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></div><div class="line"><span class="tag">      <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:configChanges</span>=<span class="string">"keyboard|keyboardHidden|orientation|screenSize"</span></span></div><div class="line"><span class="tag">        <span class="attr">android:windowSoftInputMode</span>=<span class="string">"adjustResize"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">"com.facebook.react.devsupport.DevSettingsActivity"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div></pre></td></tr></table></figure></p><p>6.修改<code>android/app/src/main/java/com/APPNAMES/MainActivity.java</code>文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">import com.facebook.react.ReactActivity;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.os.Bundle;</div><div class="line"></div><div class="line">import com.facebook.react.ReactInstanceManager;</div><div class="line">import com.facebook.react.bridge.ReactContext;</div><div class="line">import com.mehcode.reactnative.splashscreen.SplashScreen;</div><div class="line"></div><div class="line">public class MainActivity extends ReactActivity &#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">      // Show the js-controlled splash screen</div><div class="line">        SplashScreen.show(this, getReactInstanceManager());</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>7.修改项目入口页面<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> SplashScreen <span class="keyword">from</span> <span class="string">"rn-splash-screen"</span>;</div><div class="line"></div><div class="line"><span class="comment">// Hide the active splash screen</span></div><div class="line">SplashScreen.hide();</div></pre></td></tr></table></figure></p><p>执行<code>react-native run-android</code>启动查看效果</p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修改App图标&quot;&gt;&lt;a href=&quot;#修改App图标&quot; class=&quot;headerlink&quot; title=&quot;修改App图标&quot;&gt;&lt;/a&gt;修改App图标&lt;/h2&gt;&lt;p&gt;替换项目目录&lt;code&gt;android\app\src\main\res\mipmap-xxx&lt;/c
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="http://blog.cuiyy.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>(一)ReactNative环境搭建及项目创建</title>
    <link href="http://blog.cuiyy.top/2017/12/18/HEMuznW11H0mJepR/"/>
    <id>http://blog.cuiyy.top/2017/12/18/HEMuznW11H0mJepR/</id>
    <published>2017-12-18T02:08:11.000Z</published>
    <updated>2017-12-18T02:08:11.004Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="安装所需"><a href="#安装所需" class="headerlink" title="安装所需"></a>安装所需</h2><p>Xcode、Java、Android SDK、Android Studio、Nodejs、watchman<br>安装Android 模拟器</p><h2 id="安装React-Native-CLI"><a href="#安装React-Native-CLI" class="headerlink" title="安装React Native CLI"></a>安装React Native CLI</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g react-native-cli</div></pre></td></tr></table></figure><h2 id="代码环境"><a href="#代码环境" class="headerlink" title="代码环境"></a>代码环境</h2><p>Visual Studio Code<br>浏览器插件： ReactDev Tools</p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><h2 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">react-native init app</div><div class="line">cd app</div><div class="line">npm install</div></pre></td></tr></table></figure><p>##运行项目<br>将手机用数据线链接或打开手机模拟器<br>安卓手机输入<code>adb devices</code>，会列出设备<br>在项目目录下输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm run android</div></pre></td></tr></table></figure></p><p>等待完成后会在手机上打开app实例</p><h1 id="启动调试工具"><a href="#启动调试工具" class="headerlink" title="启动调试工具"></a>启动调试工具</h1><p>如果是真机，可以摇晃手机，打开菜单，选择<code>Debug JS Remotely</code>;<br>会在浏览器中打开<code>http://localhost:19001/debugger-ui/</code>页面。<br>如果是模拟器启动，可以输入以下命令触发：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell input keyevent 82</div></pre></td></tr></table></figure><p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws3.sinaimg.cn/large/006tNc79gy1fmha2ik3x7j30ad0j4jtq.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure></p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&quot;安装所需&quot;&gt;&lt;a href=&quot;#安装所需&quot; class=&quot;headerlink&quot; title=&quot;安装所需&quot;&gt;&lt;/a&gt;安装所需&lt;/h
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="React Native" scheme="http://blog.cuiyy.top/tags/React-Native/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 简单的拖拽排序组件</title>
    <link href="http://blog.cuiyy.top/2017/11/15/JQeeQ6YFw3kcrMxh/"/>
    <id>http://blog.cuiyy.top/2017/11/15/JQeeQ6YFw3kcrMxh/</id>
    <published>2017-11-15T03:24:00.000Z</published>
    <updated>2017-11-15T03:24:00.035Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cyyjs.github.io/cvc/#/draggable" target="_blank" rel="external">演示地址</a></p><p><a href="https://github.com/cyyjs/cvc" target="_blank" rel="external">github</a></p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cyyjs.github.io/cvc/#/draggable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;演示地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cyyjs/cvc&quot; t
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Vue.js" scheme="http://blog.cuiyy.top/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>PM2+Log4js log写入失败问题</title>
    <link href="http://blog.cuiyy.top/2017/11/15/I4m5wYG9ovY6L9Va/"/>
    <id>http://blog.cuiyy.top/2017/11/15/I4m5wYG9ovY6L9Va/</id>
    <published>2017-11-15T03:02:53.000Z</published>
    <updated>2017-11-15T03:02:53.153Z</updated>
    
    <content type="html"><![CDATA[<p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws1.sinaimg.cn/large/006tNc79gy1flgieyz2y1j313s0aedgr.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><br>问题：项目中用<code>log4js</code>可以正常写入日志到文件中，后来使用<code>pm2</code>启动后，发现文件不能写入到文件了。网上查了很久，并没有找到原因，所以就想到了查看源码的方法，来查找到底是哪里出了问题。</p><h3 id="先看相关的配置"><a href="#先看相关的配置" class="headerlink" title="先看相关的配置"></a>先看相关的配置</h3><p><code>log4js</code>配置：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"type"</span>: <span class="string">"dateFile"</span>,</div><div class="line">   <span class="attr">"filename"</span>: <span class="string">"logfile/"</span>,</div><div class="line">   <span class="attr">"pattern"</span>: <span class="string">"flow-yyyy-MM-dd-hh.log"</span>,</div><div class="line">   <span class="attr">"alwaysIncludePattern"</span>: <span class="literal">true</span>,</div><div class="line">   <span class="attr">"layout"</span>: &#123; <span class="attr">"type"</span>: <span class="string">"messagePassThrough"</span> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><code>pm2</code>配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"apps"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"name"</span>: <span class="string">"project_name"</span>,</div><div class="line">            <span class="attr">"script"</span>: <span class="string">"index.js"</span>,</div><div class="line">            <span class="attr">"exec_mode"</span>: <span class="string">"cluster"</span>,</div><div class="line">            <span class="attr">"instances"</span>: <span class="number">4</span>,</div><div class="line">            <span class="attr">"instance_var"</span>: <span class="string">"INSTANCE_ID"</span>,</div><div class="line">            <span class="attr">"max_memory_restart"</span>: <span class="string">"1G"</span>,</div><div class="line">            <span class="attr">"autorestart"</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">"node_args"</span>: [],</div><div class="line">            <span class="attr">"watch"</span>: [<span class="string">"config"</span>, <span class="string">"data"</span>, <span class="string">"lib"</span>,<span class="string">"public"</span>, <span class="string">"index.js"</span>],</div><div class="line">            <span class="attr">"watch_options"</span>: &#123;</div><div class="line">                <span class="attr">"usePolling"</span>: <span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">"args"</span>: [],</div><div class="line">            <span class="attr">"env"</span>: &#123;&#125;,</div><div class="line">            <span class="attr">"env_dev"</span>: &#123;</div><div class="line">                ...</div><div class="line">            &#125;,</div><div class="line">            "env_production": &#123;</div><div class="line">                ...</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="log4js无法自动生成对应时间格式的文件"><a href="#log4js无法自动生成对应时间格式的文件" class="headerlink" title="log4js无法自动生成对应时间格式的文件"></a><code>log4js</code>无法自动生成对应时间格式的文件</h3><p>正常直接启动会在配置log目录下生成一个<code>flow-yyyy-MM-dd-hh.log</code>格式的文件，但是用<code>pm2</code>启动的时候并没有生成。</p><p>log4js的调用方法为<code>require(&#39;log4js&#39;).getLogger()</code>,所以就直接在源码中找<code>getLogger</code>：<br>1、通过<code>package.json</code>中的<code>main</code>我们确定它的主入口文件为<code>./lib/log4js</code>；<br>2、找到<code>getLogger</code>方法<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Get a logger instance.</span></div><div class="line"><span class="comment"> * @static</span></div><div class="line"><span class="comment"> * @param loggerCategoryName</span></div><div class="line"><span class="comment"> * @return &#123;Logger&#125; instance of logger for the category</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getLogger</span>(<span class="params">category</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> cat = category || <span class="string">'default'</span>;</div><div class="line">  debug(<span class="string">`creating logger as <span class="subst">$&#123;isMaster() ? <span class="string">'master'</span> : <span class="string">'worker'</span>&#125;</span>`</span>);</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Logger((isMaster() ? sendLogEventToAppender : workerDispatch), cat);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中有个<code>isMaster()</code>方法,判断是否为主进程<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPM2Master</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> config.pm2 &amp;&amp; process.env[config.pm2InstanceVar] === <span class="string">'0'</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMaster</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> config.disableClustering || cluster.isMaster || isPM2Master();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到<code>isPM2Master</code>是通过config中的<code>pm2</code>参数和<code>pm2InstanceVar</code>来确定的。<br>所以我们需要在<code>log4js</code>的配置中增加这两个配置。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    pm2: true,</div><div class="line">    pm2InstanceVar: "INSTANCE_ID" // 与pm2的配置对应 </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><a href="http://pm2.keymetrics.io/docs/usage/environment/#node_app_instance-pm2-25-minimum" target="_blank" rel="external">pm2 中NODE_APP_INSTANCE 特定的环境变量</a>可以用来判断主从进程</p><p>此时重启<code>pm2</code>后(需要<code>pm2 delete</code>不然pm2配置文件不生效)，已经可以看到生成的文件了，但是日志还是不能写入。<br>接着看源码：</p><h3 id="workerDispatch方法"><a href="#workerDispatch方法" class="headerlink" title="workerDispatch方法"></a><code>workerDispatch</code>方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">workerDispatch</span>(<span class="params">logEvent</span>) </span>&#123;</div><div class="line">  debug(<span class="string">`sending message to master from worker <span class="subst">$&#123;process.pid&#125;</span>`</span>);</div><div class="line">  process.send(&#123; <span class="attr">topic</span>: <span class="string">'log4js:message'</span>, <span class="attr">data</span>: serialise(logEvent) &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>此方法为工作进程接收到log事件，并发出消息，必定有接收的地方，通过查找代码发现此方法:<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">configure</span>(<span class="params">configurationFileOrObject</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">  <span class="keyword">if</span> (config.disableClustering) &#123;</div><div class="line">    debug(<span class="string">'Not listening for cluster messages, because clustering disabled.'</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// PM2 cluster support</span></div><div class="line">    <span class="comment">// PM2 runs everything as workers - install pm2-intercom for this to work.</span></div><div class="line">    <span class="comment">// we only want one of the app instances to write logs</span></div><div class="line">    <span class="keyword">if</span> (isPM2Master()) &#123;</div><div class="line">      debug(<span class="string">'listening for PM2 broadcast messages'</span>);</div><div class="line">      process.removeListener(<span class="string">'message'</span>, receiver);</div><div class="line">      process.on(<span class="string">'message'</span>, receiver);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cluster.isMaster) &#123;</div><div class="line">      debug(<span class="string">'listening for cluster messages'</span>);</div><div class="line">      cluster.removeListener(<span class="string">'message'</span>, receiver);</div><div class="line">      cluster.on(<span class="string">'message'</span>, receiver);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      debug(<span class="string">'not listening for messages, because we are not a master process'</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p><p>我们可以看到在<code>if</code>条件中有监听的操作，但是，后面的监听函数没有执行，后来才注意到里面的三行注释，需要安装<a href="https://www.npmjs.com/package/pm2-intercom" target="_blank" rel="external"><code>pm2-intercom</code></a>;在执行了<code>pm2 install pm2-intercom</code>后，果然可以了，日志成功写入到了文件中。</p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;figure class=&quot;image-bubble&quot;&gt; &lt;div class=&quot;img-lightbox&quot;&gt; &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt; &lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79gy1fl
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="log4js" scheme="http://blog.cuiyy.top/tags/log4js/"/>
    
      <category term=" pm2" scheme="http://blog.cuiyy.top/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>TypeError The header content contains invalid characters</title>
    <link href="http://blog.cuiyy.top/2017/11/04/T7ildrYrjZMrsfzN/"/>
    <id>http://blog.cuiyy.top/2017/11/04/T7ildrYrjZMrsfzN/</id>
    <published>2017-11-04T07:56:42.000Z</published>
    <updated>2017-11-04T07:56:42.594Z</updated>
    
    <content type="html"><![CDATA[<p>nodejs运行过程中出现此错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">TypeError: The header content contains invalid characters</div></pre></td></tr></table></figure><p>出现此原因发现是在执行<code>ctx.redirect</code> 的时候出现的，<br>经检查发现为<code>redirect</code>的<code>url</code>中包含了中文，修改为<code>redirect(encodeURI(url))</code>即可。</p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nodejs运行过程中出现此错误&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
      
    
    </summary>
    
      <category term="BUG" scheme="http://blog.cuiyy.top/categories/BUG/"/>
    
    
      <category term="nodejs" scheme="http://blog.cuiyy.top/tags/nodejs/"/>
    
      <category term=" http" scheme="http://blog.cuiyy.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Pow 快速创建静态网页服务器</title>
    <link href="http://blog.cuiyy.top/2017/10/20/IhU1Rkv60ls2ja09/"/>
    <id>http://blog.cuiyy.top/2017/10/20/IhU1Rkv60ls2ja09/</id>
    <published>2017-10-20T07:36:23.000Z</published>
    <updated>2017-10-20T07:36:23.899Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkoqm5g827j30be08cmy6.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><p><a href="http://pow.cx/" target="_blank" rel="external">Pow</a>是Mac OS X的零配置机架式服务器。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>Pow需要Mac OS X 10.9或更高版本。要安装或升级Pow，只需打开终端并运行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl get.pow.cx | sh</div></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>只需将静态文件目录链接到您的<code>~/.pow</code> 目录中即可。<br>假设你有个应用程序放在 <code>~/Projects/myapp</code>中，并且包含了<code>public</code>目录，你想要这样访问它 <code>http://myapp.dev/</code>；<br>可以这样设置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.pow</div><div class="line">ln -s ~/Projects/myapp</div></pre></td></tr></table></figure><p>如果您有一个静态站点，并希望将文件保留在项目的根目录中（即不在 public目录中），则可以执行以下操作：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> ~/.pow</div><div class="line">mkdir your-app-domain</div><div class="line"><span class="built_in">cd</span> !$</div><div class="line">ln -s ~/Projects/your-app public</div></pre></td></tr></table></figure><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt; &lt;div class=&quot;img-lightbox&quot;&gt; &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt; &lt;img src=&quot;https://ws4.sinaimg.cn/large/006tNc79ly1fkoqm
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term=" 工具" scheme="http://blog.cuiyy.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>前端mac系统重装之后</title>
    <link href="http://blog.cuiyy.top/2017/10/17/etb9IVimFgncBxLQ/"/>
    <id>http://blog.cuiyy.top/2017/10/17/etb9IVimFgncBxLQ/</id>
    <published>2017-10-17T10:20:50.000Z</published>
    <updated>2017-10-17T10:20:50.424Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws1.sinaimg.cn/large/006tNc79ly1fke3s9cr5qj30c00aa755.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>最近刚更新了 macOS High Sierra，更新过程非常坎坷，最后终于安装成功了，但是曾经装的软件什么的都没有了，需要重新安装，这里列出我所安装的软件列表：</p><h3 id="系统常用"><a href="#系统常用" class="headerlink" title="系统常用"></a>系统常用</h3><ul><li>chrome浏览器</li><li><a href="https://srf.baidu.com/input/mac.html" target="_blank" rel="external">百度输入法</a></li><li>Magnet 分屏软件</li><li>iPic 图片上传神器</li><li>全能解压</li><li>Alfred</li><li><a href="http://sipapp.io/" target="_blank" rel="external">Sip 拾色工具</a></li><li>1Password</li></ul><h3 id="社交"><a href="#社交" class="headerlink" title="社交"></a>社交</h3><ul><li><a href="http://weixin.qq.com/" target="_blank" rel="external">微信</a></li><li><a href="http://im.qq.com/macqq/" target="_blank" rel="external">qq</a></li><li><a href="https://im.dingtalk.com/" target="_blank" rel="external">钉钉</a></li></ul><h3 id="写作笔记"><a href="#写作笔记" class="headerlink" title="写作笔记"></a>写作笔记</h3><ul><li><a href="http://note.youdao.com/" target="_blank" rel="external">有道云笔记</a></li><li><a href="https://www.yinxiang.com/" target="_blank" rel="external">印象笔记</a></li></ul><h3 id="编辑器"><a href="#编辑器" class="headerlink" title="编辑器"></a>编辑器</h3><ul><li><a href="http://www.sublimetext.com/" target="_blank" rel="external">Sublime Text 3</a> (<a href="https://packagecontrol.io/installation" target="_blank" rel="external">package control</a>)</li><li><a href="https://code.visualstudio.com/" target="_blank" rel="external">VScode</a></li></ul><h3 id="Shell增强"><a href="#Shell增强" class="headerlink" title="Shell增强"></a>Shell增强</h3><ul><li><a href="http://ohmyz.sh/" target="_blank" rel="external">oh my zsh</a></li><li><a href="https://brew.sh/" target="_blank" rel="external">Homebrew</a></li><li>wget (brew install wget)</li><li>autojump (brew install autojump)<br>如果link失败可执行</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chown -R $(whoami) /usr/local/share/</div></pre></td></tr></table></figure><h3 id="代码管理"><a href="#代码管理" class="headerlink" title="代码管理"></a>代码管理</h3><ul><li><a href="https://git-scm.com/" target="_blank" rel="external">Git</a><br>生成KEY：<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git config --global user.name “xx”</div><div class="line">git config --global user.email “x@gmail.com"</div><div class="line">ssh-keygen -t rsa -C “xx@gmail.com”</div></pre></td></tr></table></figure></li></ul><h3 id="开发相关"><a href="#开发相关" class="headerlink" title="开发相关"></a>开发相关</h3><ul><li><a href="https://nodejs.org/en/download/" target="_blank" rel="external">Nodejs</a></li><li>nodemon (npm install -g nodemon) node更改自动重启</li><li><a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="external">yarn</a> （node包管理）</li><li><a href="https://npm.taobao.org/" target="_blank" rel="external">cnpm</a> 淘宝 NPM 镜像</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><ul><li><a href="https://www.mongodb.com/" target="_blank" rel="external">Mongodb</a></li><li><a href="https://www.mysql.com/" target="_blank" rel="external">MySQL</a></li><li><a href="https://robomongo.org/" target="_blank" rel="external">Robo 3T</a> mongo客户端 </li><li><a href="http://www.navicat.com.cn" target="_blank" rel="external">Navicat for mysql</a> MySQL客户端</li><li><a href="http://www.redis.cn/" target="_blank" rel="external">Redis</a></li><li><a href="https://github.com/uglide/RedisDesktopManager/releases" target="_blank" rel="external">RedisDesktopManager</a> Redis客户端</li><li><a href="http://memcached.org/" target="_blank" rel="external">Memcached</a> 缓存管理</li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><a href="https://www.sass.hk/" target="_blank" rel="external">Scss</a> 前端CSS扩展语言</li><li>vim 设置<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">vim ~/.zshrc</div><div class="line">syntax on</div><div class="line">set nu # 显示行号</div></pre></td></tr></table></figure></li></ul><hr><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt; &lt;div class=&quot;img-lightbox&quot;&gt; &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt; &lt;img src=&quot;https://ws1.sinaimg.cn/large/006tNc79ly1fke3s
      
    
    </summary>
    
      <category term="默认分类" scheme="http://blog.cuiyy.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term=" 工具" scheme="http://blog.cuiyy.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Weex 项目 Android部署</title>
    <link href="http://blog.cuiyy.top/2017/10/16/0ySGeMATlDSbikLM/"/>
    <id>http://blog.cuiyy.top/2017/10/16/0ySGeMATlDSbikLM/</id>
    <published>2017-10-16T09:52:41.000Z</published>
    <updated>2017-10-16T09:52:41.468Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>1、安装 <a href="https://developer.android.com/studio/install.html" target="_blank" rel="external">Android Studio</a>或者 <a href="https://developer.android.com/studio/releases/sdk-tools.html" target="_blank" rel="external">Android SDK</a></p><p>2、 安装 <code>Android SDK Build-Tools 23.0.2</code>版本</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws4.sinaimg.cn/large/006tNc79ly1fkk7rwkl1vj30wu0owgpy.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><br>打开<code>Android Studio</code>&gt;<code>Tools</code>&gt;<code>Android</code>&gt;<code>SDK Manager</code>，选择<code>SDK Tools</code>选项， 选择<code>Show Package Details</code>; 找到 <code>23.0.2</code>勾选并安装。<br><br><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkk7wozlbqj31jq11aalh.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>3、配置环境变量,<br>执行<code>vim ~/.bash_profile</code> 增加如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> ANDROID_HOME=/Users/you/Library/Android/sdk</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/tools</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:<span class="variable">$&#123;ANDROID_HOME&#125;</span>/platform-tools</div></pre></td></tr></table></figure></p><p>保存后执行<code>resource ~/.bash_profile</code>,使修改生效；<br>如果你用了其他终端，如『zsh』，可将 <code>. ~/.bash_profile</code>命令添加到<code>~/.zshrc</code>中；</p><h2 id="jdk-安装"><a href="#jdk-安装" class="headerlink" title="jdk 安装"></a>jdk 安装</h2><p>下载安装<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">jdk 8</a>，如果安装了9版本会在运行时，出现编译失败问题，如下图：</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws1.sinaimg.cn/large/006tNc79ly1fkk6ux0sfbj30hj08c75h.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>如果需要多个jdk版本可添加别名，实现快速切换使用；可在<code>.bash_profile</code>中增加如下代码<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">export</span> JAVA_8_HOME=`/usr/libexec/java_home -v 1.8`</div><div class="line"><span class="built_in">export</span> JAVA_9_HOME=`/usr/libexec/java_home -v 9`</div><div class="line"><span class="built_in">alias</span> jdk8=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>"</span></div><div class="line"><span class="built_in">alias</span> jdk9=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_9_HOME</span>"</span></div></pre></td></tr></table></figure></p><p>此时可通过<code>jdk8</code>、<code>jdk9</code>随意切换版本。</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>一切准备就绪后在终端运行以下命令，增加安卓端支持：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">weex platform add android</div><div class="line">weex run android</div></pre></td></tr></table></figure></p><p>运行过程中会下载一堆的jar包；<br>并会出现以下错误：</p><p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkk6ulgqvhj30h6048gm9.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><br>提示缺少安卓设备，我们可以在<code>Android Studio</code>中设置虚拟机，也可以用USB连接安卓手机，并打开调试模式，然后重新执行<code>weex run android</code>;</p><p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws3.sinaimg.cn/large/006tNc79ly1fkk8f8c5f7j309b03njrn.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><br>如果运行成功，可在手机上看到生成的程序，并自动打开。</p><p>注：有些手机可能会有一些权限问题导致不能自动安装成功，需要响应的设置才行。</p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境要求&quot;&gt;&lt;a href=&quot;#环境要求&quot; class=&quot;headerlink&quot; title=&quot;环境要求&quot;&gt;&lt;/a&gt;环境要求&lt;/h2&gt;&lt;p&gt;1、安装 &lt;a href=&quot;https://developer.android.com/studio/install.htm
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="weex" scheme="http://blog.cuiyy.top/tags/weex/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB开启权限验证的方法</title>
    <link href="http://blog.cuiyy.top/2017/10/13/O74WjrqshGRNERf1/"/>
    <id>http://blog.cuiyy.top/2017/10/13/O74WjrqshGRNERf1/</id>
    <published>2017-10-13T03:40:10.000Z</published>
    <updated>2017-10-13T03:40:10.866Z</updated>
    
    <content type="html"><![CDATA[<p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws2.sinaimg.cn/large/006tKfTcly1fkggtqchopj30e80e8t8z.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure></p><h2 id="基本角色"><a href="#基本角色" class="headerlink" title="基本角色"></a>基本角色</h2><ul><li><code>root</code>  这是超级管理员</li><li><code>userAdminAnyDatabase</code> 这个角色拥有分配角色和用户的权限，但没有查写的权限</li><li><code>readWrite</code>  有读写权限</li><li><code>read</code>    有读权限</li></ul><h2 id="创建一个超级用户"><a href="#创建一个超级用户" class="headerlink" title="创建一个超级用户"></a>创建一个超级用户</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line">db.createUser(&#123;</div><div class="line">    user: <span class="string">"root"</span>,</div><div class="line">    pwd: <span class="string">"cyy_mongo"</span>,</div><div class="line">    roles: [&#123;</div><div class="line">      <span class="string">"role"</span> : <span class="string">"root"</span>,</div><div class="line">      <span class="string">"db"</span> : <span class="string">"admin"</span> </div><div class="line">    &#125;]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>db是指定数据库的名字，admin是管理数据库。</p><h2 id="开启认证"><a href="#开启认证" class="headerlink" title="开启认证"></a>开启认证</h2><p>进入<code>mongod.conf</code>配置文件，将<code>auth</code> 改为<code>true</code>；<br>重启<code>mongo</code>服务；</p><h2 id="权限登录"><a href="#权限登录" class="headerlink" title="权限登录"></a>权限登录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo --host xxx -u adminUserName -p userPassword --authenticationDatabase admin</div></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="查看当前用户的权限"><a href="#查看当前用户的权限" class="headerlink" title="查看当前用户的权限"></a>查看当前用户的权限</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.runCommand(&#123;</div><div class="line">    usersInfo:<span class="string">"userName"</span>,</div><div class="line">    showPrivileges:<span class="literal">true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="创建一般用户，也是用createUser"><a href="#创建一般用户，也是用createUser" class="headerlink" title="创建一般用户，也是用createUser"></a>创建一般用户，也是用createUser</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">db.createUser(&#123;</div><div class="line">    user:<span class="string">"user1"</span>,</div><div class="line">    pwd:<span class="string">"12345"</span>,</div><div class="line">    roles:[</div><div class="line">      &#123;<span class="attr">role</span>:<span class="string">"read"</span>,<span class="attr">db</span>:<span class="string">"db1"</span>&#125;,</div><div class="line">      &#123;<span class="attr">role</span>:<span class="string">"read"</span>,<span class="attr">db</span>:<span class="string">"db2"</span>&#125;,</div><div class="line">      &#123;<span class="attr">role</span>:<span class="string">"read"</span>,<span class="attr">db</span>:<span class="string">"db3"</span>&#125;</div><div class="line">    ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure><h3 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use admin</div><div class="line">db.changeUserPassword(<span class="string">"username"</span>, <span class="string">"xxx"</span>)</div></pre></td></tr></table></figure><h3 id="查看用户信息"><a href="#查看用户信息" class="headerlink" title="查看用户信息"></a>查看用户信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.runCommand(&#123;<span class="attr">usersInfo</span>:<span class="string">"userName"</span>&#125;)</div></pre></td></tr></table></figure><h3 id="修改密码和用户信息"><a href="#修改密码和用户信息" class="headerlink" title="修改密码和用户信息"></a>修改密码和用户信息</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.runCommand(&#123;</div><div class="line">    updateUser:<span class="string">"username"</span>,</div><div class="line">    pwd:<span class="string">"xxx"</span>,</div><div class="line">    customData:&#123;<span class="attr">title</span>:<span class="string">"xxx"</span>&#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;figure class=&quot;image-bubble&quot;&gt; &lt;div class=&quot;img-lightbox&quot;&gt; &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt; &lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fk
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="mongodb" scheme="http://blog.cuiyy.top/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>为了遇见你</title>
    <link href="http://blog.cuiyy.top/2017/10/12/dVIMLDDUxriU57uW/"/>
    <id>http://blog.cuiyy.top/2017/10/12/dVIMLDDUxriU57uW/</id>
    <published>2017-10-12T07:17:52.000Z</published>
    <updated>2017-10-12T07:17:52.503Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align:center;"><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=33071053&auto=1&height=66"></iframe><br></div><p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws2.sinaimg.cn/large/006tNbRwly1fkfheutp8jj30sg0lcjww.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure></p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;text-align:center;&quot;&gt;&lt;br&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//musi
      
    
    </summary>
    
      <category term="默认分类" scheme="http://blog.cuiyy.top/categories/%E9%BB%98%E8%AE%A4%E5%88%86%E7%B1%BB/"/>
    
    
      <category term="其他" scheme="http://blog.cuiyy.top/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>ssh 免密码登录</title>
    <link href="http://blog.cuiyy.top/2017/10/10/Ja5aO9RFlMdvjYBE/"/>
    <id>http://blog.cuiyy.top/2017/10/10/Ja5aO9RFlMdvjYBE/</id>
    <published>2017-10-10T05:00:31.000Z</published>
    <updated>2017-10-11T03:28:13.395Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>开发过程中，经常需要使用ssh登录远程主机，每次都要输入密码，影响效率，这里讲解一下，怎么使用ssh无密码登录。</p></blockquote><a id="more"></a><h3 id="本机生成ssh-key"><a href="#本机生成ssh-key" class="headerlink" title="本机生成ssh key"></a>本机生成ssh key</h3><p>ssh 无密码登录要使用公钥与私钥。linux下可以用用<code>ssh-keygen</code>生成公钥/私钥对。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C "xxx@email.com"</div></pre></td></tr></table></figure><p>然后一路回车即可。</p><p>然后可以通过以下命令查看到生成的公钥：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure><h3 id="远程主机生成ssh-key"><a href="#远程主机生成ssh-key" class="headerlink" title="远程主机生成ssh key"></a>远程主机生成ssh key</h3><p>先通过<code>ssh</code>登录到远程主机， 并以同样的方式生成<code>ssh key</code></p><h3 id="复制本机公钥到远程文件"><a href="#复制本机公钥到远程文件" class="headerlink" title="复制本机公钥到远程文件"></a>复制本机公钥到远程文件</h3><p>把本地的<code>id_rsa.pub</code>文件中的内容复制到远程主机的<code>.ssh/authorized_keys</code>文件里.</p><p><code>authorized_keys</code>文件如果没有，可以自己手动创建。</p><p>添加完成后，退出重新使用<code>ssh</code> 登录时，就不需要输入密码了。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;开发过程中，经常需要使用ssh登录远程主机，每次都要输入密码，影响效率，这里讲解一下，怎么使用ssh无密码登录。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="ssh" scheme="http://blog.cuiyy.top/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>nodejs使用socket.io实现分布式一对一发送消息</title>
    <link href="http://blog.cuiyy.top/2017/09/27/QkkxF6N8eMj7mVKX/"/>
    <id>http://blog.cuiyy.top/2017/09/27/QkkxF6N8eMj7mVKX/</id>
    <published>2017-09-27T09:13:53.000Z</published>
    <updated>2017-10-11T02:05:34.485Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用nodejs实现一个消息通知的功能，其中用到了socket.io；由于初次使用socket.io，在网上查找资料大都是聊天室广播的教程，没有找到一对一发送消息的具体实现方法，这里分享一下自己学习使用过程中踩到某些坑和最终实现方法。<br><a id="more"></a></p><blockquote><p>要实现的功能:<br>server端数据更新后，发送通知到对应客户端的用户；server是用nodejs写的，并使用了分布式，同时开启了多个实例。</p></blockquote><h3 id="一、安装依赖包"><a href="#一、安装依赖包" class="headerlink" title="一、安装依赖包"></a>一、安装依赖包</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install socket.io</div></pre></td></tr></table></figure><h3 id="二、socket-io的使用"><a href="#二、socket-io的使用" class="headerlink" title="二、socket.io的使用"></a>二、socket.io的使用</h3><p>1、index.js 文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server,&#123;</div><div class="line">    <span class="string">"path"</span>:<span class="string">"/notice"</span>  <span class="comment">//修改客户端请求的路径，默认为/socket.io</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">"./notice"</span>).init)(io); <span class="comment">//传入io</span></div></pre></td></tr></table></figure><p>2、notice.js文件内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Notice = <span class="literal">null</span>; </div><div class="line"><span class="keyword">var</span> socketMap  = &#123;&#125;; <span class="comment">//用户对应socket.id</span></div><div class="line"></div><div class="line"><span class="comment">//初始化socket连接</span></div><div class="line">exports.init = <span class="function"><span class="keyword">function</span> (<span class="params">io</span>)</span>&#123;</div><div class="line">    <span class="comment">//连接验证</span></div><div class="line">    io.use(<span class="function"><span class="keyword">function</span>(<span class="params">socket, next</span>)</span>&#123;</div><div class="line">        <span class="comment">//console.log(socket.request.headers.cookie);</span></div><div class="line">        <span class="keyword">var</span> token = socket.request._query.token || <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span>(validate(token))&#123;</div><div class="line">            socket.request.headers.user = &#123;<span class="attr">userId</span>:userId&#125;;</div><div class="line">            <span class="keyword">return</span> next();</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> next(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Authentication error'</span>));</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">    &#125;);</div><div class="line">    Notice = io.of(<span class="string">"/notice"</span>).on(<span class="string">'connection'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">socket</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> user = socket.handshake.headers.user;</div><div class="line">        <span class="keyword">var</span> user_id = user &amp;&amp; user.userId;</div><div class="line">        <span class="keyword">if</span>(user_id)&#123;</div><div class="line">            socketMap[user_id] = socket.id;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        socket.on(<span class="string">'disconnect'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">delete</span> socketMap[user_id];</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//其他模块调用，发送消息</span></div><div class="line">exports.send = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> user_id = data.accountID;</div><div class="line">    <span class="keyword">var</span> socket_id = socketMap[user_id];</div><div class="line">    Notice.to(socket_id).emit(<span class="string">'notice'</span>, data);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3、客户端文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;script src=<span class="string">"/socket.io/socket.io.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script&gt;</div><div class="line">  <span class="keyword">var</span> socket = io(<span class="string">'http://localhost?token=token'</span>);</div><div class="line">  socket.on(<span class="string">'notice'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(data);</div><div class="line">  &#125;);</div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure><p>在跨域请求的情况下<code>socket.request.headers.cookie</code>是无法获取到有效的cookie的，所以这里直接从客户端传token过来进行验证。验证通过后，将用户信息存到headers中，客户端连接成功后，取出用户信息，并将用户id与此socket连接对应id存储到全局<code>socketMap</code>变量中，然后外部模块通过调用send方法来发送消息。</p><p>这种情况在单实例情况下是没有问题的，但是如果server开启了多个实例就出问题了。</p><h3 id="三、使用nginx实现分布式部署"><a href="#三、使用nginx实现分布式部署" class="headerlink" title="三、使用nginx实现分布式部署"></a>三、使用nginx实现分布式部署</h3><p>首先需要安装<a href="http://nginx.org/" target="_blank" rel="external">nginx</a>；安装完成后编写配置文件；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">upstream</span> socket_test &#123;</div><div class="line">        ip_hash;</div><div class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8013</span>;</div><div class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:8014</span>;</div><div class="line">&#125;</div><div class="line"><span class="section">server</span> &#123;</div><div class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</div><div class="line">    <span class="attribute">server_name</span> socket.test.com;</div><div class="line">    <span class="attribute">location</span> / &#123;</div><div class="line">        <span class="attribute">proxy_pass</span>              http://socket_test/;</div><div class="line">        <span class="attribute">proxy_set_header</span>        Upgrade <span class="variable">$http_upgrade</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span>        Connection <span class="string">"upgrade"</span>;</div><div class="line">        <span class="attribute">proxy_http_version</span>      <span class="number">1</span>.<span class="number">1</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span>        Host <span class="variable">$host</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span>        X-Real-IP <span class="variable">$remote_addr</span>;</div><div class="line">        <span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动两个项目实例，分别监听8013和8014端口；<br>然后启动nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo nginx</div></pre></td></tr></table></figure><p>通过测试会发现，消息有时候能收到，有时候收不到。原因是因为客户端请求的时候，会不定的请求服务端两个实例中的一个，如果连接的时候是请求的8013端口的实例，二发送消息是8014端口的实例 ，就会在8014的实例中找不到建立连接的socket。</p><h3 id="四、分布式解决方法"><a href="#四、分布式解决方法" class="headerlink" title="四、分布式解决方法"></a>四、分布式解决方法</h3><p>socket.io官网中提供了使用<a href="https://github.com/socketio/socket.io-redis" target="_blank" rel="external">socket.io-redis</a><br>来解决此方法；socket.io-redis中使用了redis的消息订阅与发布的功能，当有通知发送的时候，会触发onmessage事件，然后会调用broadcast广播。</p><p>接下来将socket.io-redis添加到index.js文件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">//index.js</span></div><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> app = express();</div><div class="line"><span class="keyword">var</span> server = <span class="built_in">require</span>(<span class="string">'http'</span>).Server(app);</div><div class="line"><span class="keyword">var</span> io = <span class="built_in">require</span>(<span class="string">'socket.io'</span>)(server,&#123;</div><div class="line">    <span class="string">"path"</span>:<span class="string">"/notice"</span>  <span class="comment">//修改客户端请求的路径，默认为/socket.io</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">new</span> (<span class="built_in">require</span>(<span class="string">"./notice"</span>).init)(io); <span class="comment">//传入io</span></div><div class="line"><span class="keyword">var</span> redis = <span class="built_in">require</span>(<span class="string">'socket.io-redis'</span>);</div><div class="line">io.adapter(redis(&#123; <span class="attr">host</span>: settings.REDIS_HOST, <span class="attr">port</span>: settings.REDIS_PORT &#125;));</div></pre></td></tr></table></figure><p>然后重启后会发现还是不行，原因是因为在socketMap变量中有时候就找不到对应的user_id;因为是分布式的，所有socketMap变量在两台实例中并不是共享的，所以这里使用redis，在socket建立的时候将user_id对应的socket_id存储到redis中，发送消息的时候从redis中读取socket_id这样就可以了。</p><p>有时候一个用户可能会同时有多个socket连接，所以user_id对应的socket_id就可以是一个数组，发送消息的时候要循环发送，连接断开的时候要只删除对应的socket_id,保留其他建立的连接。</p><p>另外服务器重启时socket会重新建立连接，所以在初始化的的时候要清空redis中所有存储的数据。</p><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在用nodejs实现一个消息通知的功能，其中用到了socket.io；由于初次使用socket.io，在网上查找资料大都是聊天室广播的教程，没有找到一对一发送消息的具体实现方法，这里分享一下自己学习使用过程中踩到某些坑和最终实现方法。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nodejs" scheme="http://blog.cuiyy.top/tags/nodejs/"/>
    
      <category term="socket.io" scheme="http://blog.cuiyy.top/tags/socket-io/"/>
    
  </entry>
  
  <entry>
    <title>GitHub webhooks实现自动部署</title>
    <link href="http://blog.cuiyy.top/2017/09/27/pM6JLsCa29henIyW/"/>
    <id>http://blog.cuiyy.top/2017/09/27/pM6JLsCa29henIyW/</id>
    <published>2017-09-27T03:33:39.000Z</published>
    <updated>2017-10-11T02:05:18.136Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>使用第三方Git仓库，实现代码的自动部署<br>GitHub 提供了Webhooks的功能，我们通过相应的配置就可以实现在代码提交到GitHub后自动部署我们的项目</p></blockquote><a id="more"></a><h3 id="在GitHub添加部署服务器的ssh-key"><a href="#在GitHub添加部署服务器的ssh-key" class="headerlink" title="在GitHub添加部署服务器的ssh key"></a>在GitHub添加部署服务器的ssh key</h3><p>1、首先在服务器生成<a href="/2017/05/02/ssh-免密码登录/">ssh key</a><br>2、添加<code>ssh key</code>到GitHub账户中</p><p>选择<code>setting</code> -&gt; <code>SSH and GPG keys</code> -&gt; <code>New SSH Key</code> 添加</p><h3 id="配置Webhooks"><a href="#配置Webhooks" class="headerlink" title="配置Webhooks"></a>配置Webhooks</h3><p>打开需要配置<code>Webhooks</code>的项目，点击<code>Settings</code>，选择<code>Webhooks</code></p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws2.sinaimg.cn/large/006tNbRwgy1fgagteiy5ej31ji120dmi.jpg" alt="Webhooks 设置" title=""> </div> <div class="image-caption">Webhooks 设置</div> </figure><p>设置触发事件后请求的地址及方法，并选择触发事件的类型，此处选择为<code>push</code>,当我们提交代码的时候触发；设置完成后，点击添加即可。</p><h3 id="服务器编辑接受处理代码"><a href="#服务器编辑接受处理代码" class="headerlink" title="服务器编辑接受处理代码"></a>服务器编辑接受处理代码</h3><p>以<code>nodejs</code> 的 <code>express</code>为例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>); <span class="comment">// shell npm 包工具</span></div><div class="line"><span class="keyword">var</span> setting = <span class="built_in">require</span>(<span class="string">'../setting'</span>);</div><div class="line"><span class="keyword">var</span> blogPath  = setting.blog.path;</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> body = req.body;</div><div class="line">    <span class="built_in">console</span>.log(body) <span class="comment">// git 推送的数据</span></div><div class="line">    <span class="keyword">if</span> (!shell.which(<span class="string">'git'</span>)) &#123; <span class="comment">// 判断是否存在git命令</span></div><div class="line">      shell.echo(<span class="string">'Sorry, this script requires git'</span>);</div><div class="line">      shell.exit(<span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> cd = shell.cd(blogPath);</div><div class="line">    <span class="keyword">if</span> (!cd.code)&#123;</div><div class="line">        <span class="comment">// 执行git代码拉取操作</span></div><div class="line">        <span class="keyword">if</span> (shell.exec(<span class="string">'git pull origin master'</span>).code !== <span class="number">0</span>) &#123;</div><div class="line">          shell.echo(<span class="string">'Error: Git pull error!'</span>);</div><div class="line">          shell.exit(<span class="number">1</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    res.end();</div><div class="line">&#125;</div></pre></td></tr></table></figure><div style="text-align:right;font-size:12px;color:#666;">—-publish by <a href="http://ceditor.alibt.top" target="_blank">CEditor</a></div>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;使用第三方Git仓库，实现代码的自动部署&lt;br&gt;GitHub 提供了Webhooks的功能，我们通过相应的配置就可以实现在代码提交到GitHub后自动部署我们的项目&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="http://blog.cuiyy.top/tags/Git/"/>
    
      <category term="webhooks" scheme="http://blog.cuiyy.top/tags/webhooks/"/>
    
  </entry>
  
  <entry>
    <title>让你备受刮目相看的8个npm技巧</title>
    <link href="http://blog.cuiyy.top/2017/09/27/dp034EZKdW2mePbk/"/>
    <id>http://blog.cuiyy.top/2017/09/27/dp034EZKdW2mePbk/</id>
    <published>2017-09-27T02:26:54.000Z</published>
    <updated>2017-10-11T03:26:49.550Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转载自：<a href="http://www.zcfy.cc" target="_blank" rel="external">众成翻译</a><br>译者：<a href="http://www.zcfy.cc/@liuhui_is_me" target="_blank" rel="external">liuhui_is_me</a><br>链接：<a href="http://www.zcfy.cc/article/3362" target="_blank" rel="external">http://www.zcfy.cc/article/3362</a><br>原文：<a href="https://medium.freecodecamp.com/8-npm-tricks-you-can-use-to-impress-your-colleagues-dbdae1ef5f9e" target="_blank" rel="external">https://medium.freecodecamp.com/8-npm-tricks-you-can-use-to-impress-your-colleagues-dbdae1ef5f9e</a></p></blockquote><p>你观看一个同事编码时候，你会看到一些速记和技巧被应用，有些方式你并不熟悉，那你就被鄙视了，这种事情在我们每一个一生都会发生的。</p><p>在这篇文章中，我将介绍一些很有用的npm技巧，还有很多这里并不能全收录，我们只关注那些相关的并且有益于我们每天的工作和开发的技巧。<br><a id="more"></a></p><h3 id="基本的速记"><a href="#基本的速记" class="headerlink" title="基本的速记"></a>基本的速记</h3><p>为了让大家的对npm有一个一致的理解，尤其是我们的新人，让我们快速了解基本的速记和确保没有错过任何细节。</p><h4 id="安装安装包"><a href="#安装安装包" class="headerlink" title="安装安装包"></a>安装安装包</h4><p>常规: <code>npm install pkg</code>, 速记: <code>npm i pkg</code>.</p><h4 id="全局安装包"><a href="#全局安装包" class="headerlink" title="全局安装包:"></a>全局安装包:</h4><p>常规: <code>npm i --global pkg</code>, 速记: <code>npm i -g pkg</code>.</p><h4 id="安装包并包含在依赖中"><a href="#安装包并包含在依赖中" class="headerlink" title="安装包并包含在依赖中:"></a>安装包并包含在依赖中:</h4><p>常规: <code>npm i --save pkg</code>, 速记: <code>npm i -S pkg</code>.</p><h4 id="安装包并包含在开发依赖中"><a href="#安装包并包含在开发依赖中" class="headerlink" title="安装包并包含在开发依赖中:"></a>安装包并包含在开发依赖中:</h4><p>常规: <code>npm i --save-dev pkg</code>, 速记: <code>npm i -D pkg</code>.</p><p>其他的npm速记阅读npm博客 <a href="https://docs.npmjs.com/misc/config#shorthands-and-other-cli-niceties" target="_blank" rel="external">速记表</a>.</p><p>下面开始有趣的内容。</p><h4 id="1-初始化一个新包"><a href="#1-初始化一个新包" class="headerlink" title="1. 初始化一个新包"></a>1. 初始化一个新包</h4><p>我们都知道<code>npm init</code>，用来创建一个新的包。</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t01d9e905292304482f.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>但是，所有的问题都是匿名的，我们无论如何都会修改它的，那么怎么避免发生呢？</p><p>使用<code>npm init -y</code> 和 <code>npm init -f</code>回到初始化！</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t018b19458ea1e4f29c.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><h4 id="2-运行测试命令"><a href="#2-运行测试命令" class="headerlink" title="2. 运行测试命令"></a>2. 运行测试命令</h4><p>另一个命令就是<code>npm test</code>,我们可能每天使用依次或者一天使用好几次。</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t013675388a929b715a.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>如果我告诉你可以使用少于40%的字符去完成这个功能？我们经常使用，应该这样。</p><p>幸运的是，我们可以使用<code>npm t</code>，它就可以胜任</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t0119b0f93fdbce3c52.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><h4 id="3-枚举可用的脚本"><a href="#3-枚举可用的脚本" class="headerlink" title="3. 枚举可用的脚本"></a>3. 枚举可用的脚本</h4><p>我们开始一个新项目，我们想知道如何开始。我们通常会问自己这样的问题：我们如何运行它？哪些脚本可用？</p><p>一个方法是打开package.json文件并检查<code>scripts</code>部分。</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t01e0d5d6b57de82093.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>我们可以做的更好，当然，我们只是运行<code>npm run</code>得到一个的所有可用的脚本的列表。</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t0185df886f66ed19f9.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>另外的可以选择是安装<code>ntl</code> (<code>npm i -g ntl</code>)，然后运行<code>ntl</code>在项目文件夹中。它也可以运行脚本，也很方面。</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t01c60c779d0d614408.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><h4 id="4-枚举已经安装的包"><a href="#4-枚举已经安装的包" class="headerlink" title="4. 枚举已经安装的包"></a>4. 枚举已经安装的包</h4><p>类似于可用的脚本，有时我们会问自己我们的项目中有哪些依赖项。</p><p>我们可以再次打开package.json文件和检查，但是我们已经做的更好了。</p><p>使用 <code>npm ls --depth 0</code>.</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t014ad711b281c288ae.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>枚举全局安装包，使用<code>npm ls -g --depth 0</code></p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t01ab4908f2e4500392.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><h4 id="5-运行本地安装的可执行文件"><a href="#5-运行本地安装的可执行文件" class="headerlink" title="5. 运行本地安装的可执行文件"></a>5. 运行本地安装的可执行文件</h4><p>我们安装了一个包在我们的项目中，它是一个可执行的，但我们只能运行它通过一个新的脚本。你想知道为什么，或者如何克服它？</p><p>首先，让我们了解为什么——当我们在终端中执行命令时，实际发生的是它在PATH环境变量中列出的所有路径中查找一个具有相同名称的可执行文件。这就是他们如何神奇地从任何地方都可以执行。本地安装的软件包登记他们的可执行文件在本地，所以他们不在我们的<code>PATH</code>路径中将不会被发现。</p><p>当我们运行这些可执行文件通过一个新脚本，它是如何工作的呢？你可能会问？很好的问题！这是因为这种方式运行时，NPM做了一点技巧和增加了一个额外的文件夹到<code>PATH</code>，<code>/node_modules/.bin</code>中。<br>你可以看到它的运行<code>npm run env | grep &quot;$PATH&quot;</code>。你也可以运行只是<code>npm run env</code> 查看所有可用的环境变量，npm增加了一些更有趣的东西。<br><code>/node_modules/.bin</code>，如果你不知道，正是在本地安装的软件包放置可执行文件的地方。</p><p>我们可以运行 <code>./node_modules/.bin/mocha</code> 在我们的项目中，看看将会发生什么.</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t011a44c15fdb274912.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>很简单, 对吧? 仅仅运行 <code>./node_modules/.bin/</code> ，无论什么时候你想要运行本地已安装的可执行文件。</p><h4 id="6-在网上查找你想要的包"><a href="#6-在网上查找你想要的包" class="headerlink" title="6. 在网上查找你想要的包"></a>6. 在网上查找你想要的包</h4><p>你可能看到了<code>repository</code>这个入口在package.json文件中，疑问“这有什么好处？”</p><p>为了问答这个问题，仅仅运行<code>npm repo</code>然后在你的浏览器中查看。</p><p>与之类似,<code>npm home</code>命令进入主页。</p><p>如果你想打开你的包的主页<a href="https://www.npmjs.com/" target="_blank" rel="external">npmjs.com</a>，那是一个不错的速记，<code>npm docs</code>。</p><h4 id="7-在其他脚本前后运行脚本"><a href="#7-在其他脚本前后运行脚本" class="headerlink" title="7. 在其他脚本前后运行脚本"></a>7. 在其他脚本前后运行脚本</h4><p>您可能熟悉诸如<code>pretest</code>之类的脚本，它允许您定义在<code>test</code>脚本之前运行的代码。</p><p>您可能会惊讶地发现，您可以为每个脚本配置或有或后的脚本，包括您自己的自定义脚本！</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t010206810a272d84df.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><p>对于项目中，你使用NPM作为您的构建工具，有很多脚本，你需要自己总结使用。</p><h4 id="8-修改包的版本"><a href="#8-修改包的版本" class="headerlink" title="8. 修改包的版本"></a>8. 修改包的版本</h4><p>你开发一个安装包，你使用<a href="http://semver.org/" target="_blank" rel="external">semver</a>作为版本管理工具，修改一个新版本。</p><p>通过这种方式，你需要手动的修改package.json文件，我们不推荐这样做。</p><p>更容易的方式是运行<code>npm version</code> 通过 <code>major</code>, <code>minor</code> 或者 <code>patch</code></p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://p0.qhimg.com/t01794393233d68fbaf.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文转载自：&lt;a href=&quot;http://www.zcfy.cc&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;众成翻译&lt;/a&gt;&lt;br&gt;译者：&lt;a href=&quot;http://www.zcfy.cc/@liuhui_is_me&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;liuhui_is_me&lt;/a&gt;&lt;br&gt;链接：&lt;a href=&quot;http://www.zcfy.cc/article/3362&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.zcfy.cc/article/3362&lt;/a&gt;&lt;br&gt;原文：&lt;a href=&quot;https://medium.freecodecamp.com/8-npm-tricks-you-can-use-to-impress-your-colleagues-dbdae1ef5f9e&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://medium.freecodecamp.com/8-npm-tricks-you-can-use-to-impress-your-colleagues-dbdae1ef5f9e&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;你观看一个同事编码时候，你会看到一些速记和技巧被应用，有些方式你并不熟悉，那你就被鄙视了，这种事情在我们每一个一生都会发生的。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我将介绍一些很有用的npm技巧，还有很多这里并不能全收录，我们只关注那些相关的并且有益于我们每天的工作和开发的技巧。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="npm" scheme="http://blog.cuiyy.top/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>pm2怎么指定master</title>
    <link href="http://blog.cuiyy.top/2017/08/08/7URpImMqF24g6oKs/"/>
    <id>http://blog.cuiyy.top/2017/08/08/7URpImMqF24g6oKs/</id>
    <published>2017-08-08T06:59:46.000Z</published>
    <updated>2017-08-08T07:10:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>node集群启动模式通常会这样写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cluster = <span class="built_in">require</span>(<span class="string">'cluster'</span>);  </div><div class="line"><span class="keyword">var</span> http    = <span class="built_in">require</span>(<span class="string">'http'</span>);  </div><div class="line"><span class="keyword">var</span> os      = <span class="built_in">require</span>(<span class="string">'os'</span>);</div><div class="line"><span class="keyword">var</span> numCPUs = os.cpus().length;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(cluster.isMaster)&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; numCPUs; ++i) &#123;</div><div class="line">    cluster.fork();</div><div class="line">  &#125;</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.writeHead(<span class="number">200</span>);</div><div class="line">    res.end(<span class="string">"hello world"</span>);</div><div class="line">  &#125;).listen(<span class="number">8080</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们可以通过<code>cluster.isMaster</code>来执行一些任务;<br><a href="http://pm2.keymetrics.io/" target="_blank" rel="external">pm2</a>是一个很好的<code>nodejs</code> 管理工具，我们可以通过配置来启动我们的<code>nodejs</code>服务，他的代码和我们平常写的一样。<br>例如：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;  </div><div class="line">  res.writeHead(<span class="number">200</span>);</div><div class="line">  res.end(<span class="string">"hello world"</span>);</div><div class="line">&#125;).listen(<span class="number">8080</span>);</div></pre></td></tr></table></figure></p><p>但是我们想只在<code>master</code>上做一些任务，改怎么做呢？<br>下面跟出一中方法：<br>我们可以通过两个配置，分别指定不同的命令行参数来区别：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"apps"</span> : [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Master"</span>,</div><div class="line">      <span class="attr">"script"</span>: <span class="string">"app.js"</span>,</div><div class="line">      <span class="attr">"args"</span>: [<span class="string">"master"</span>],</div><div class="line">      <span class="attr">"instances"</span>: <span class="string">"1"</span>,</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"Slave"</span>,</div><div class="line">      <span class="attr">"script"</span>: <span class="string">"app.js"</span>,</div><div class="line">      <span class="attr">"args"</span>: [<span class="string">"slave"</span>],</div><div class="line">      <span class="attr">"instances"</span>: <span class="string">"-1"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>然后在<code>app.js</code>中这样写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (process.argv[<span class="number">2</span>] === <span class="string">'master'</span>)&#123;</div><div class="line">   <span class="comment">// ...</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>也可以通过其他环境变量参数来区分那个是<code>master</code>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;node集群启动模式通常会这样写&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;d
      
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nodejs" scheme="http://blog.cuiyy.top/tags/nodejs/"/>
    
      <category term="pm2" scheme="http://blog.cuiyy.top/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>搭建网盘服务器</title>
    <link href="http://blog.cuiyy.top/2017/07/18/YocazGnoJ07Z4rms/"/>
    <id>http://blog.cuiyy.top/2017/07/18/YocazGnoJ07Z4rms/</id>
    <published>2017-07-18T02:00:11.000Z</published>
    <updated>2017-07-19T03:24:11.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Seafile-服务器"><a href="#安装-Seafile-服务器" class="headerlink" title="安装 Seafile 服务器"></a>安装 Seafile 服务器</h2><h3 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h3><p>在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install mysql-server</div></pre></td></tr></table></figure><p>使用以下命令安装 Python 相关依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3</div></pre></td></tr></table></figure><p>安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该[密码]以供后面步骤使用。<br><a id="more"></a></p><h2 id="为-Seafile-创建一个用户"><a href="#为-Seafile-创建一个用户" class="headerlink" title="为 Seafile 创建一个用户"></a>为 Seafile 创建一个用户</h2><p>创建 Seafile 用户，使用它运行 Seafile 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo useradd -m -s /bin/bash seafile</div></pre></td></tr></table></figure><h3 id="为该用户设置密码："><a href="#为该用户设置密码：" class="headerlink" title="为该用户设置密码："></a>为该用户设置密码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd seafile</div></pre></td></tr></table></figure><h2 id="下载Seafile"><a href="#下载Seafile" class="headerlink" title="下载Seafile"></a>下载Seafile</h2><h3 id="切换到新用户，需要输入你刚才为seafile用户设置的密码："><a href="#切换到新用户，需要输入你刚才为seafile用户设置的密码：" class="headerlink" title="切换到新用户，需要输入你刚才为seafile用户设置的密码："></a>切换到新用户，需要输入你刚才为seafile用户设置的密码：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">su - seafile</div></pre></td></tr></table></figure><h3 id="切换目录："><a href="#切换目录：" class="headerlink" title="切换目录："></a>切换目录：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~</div></pre></td></tr></table></figure><p>这里可以查看获取最新 Seafile 下载链接，参考以下命令进行下载。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">wget http://seafile-downloads.oss-cn-shanghai.aliyuncs.com/seafile-server_6.1.1_i386.tar.gz</div><div class="line"></div><div class="line"><span class="meta">#</span><span class="bash"> 64位：</span></div><div class="line"><span class="meta">#</span><span class="bash"> https://download.seadrive.org/seafile-server_6.1.1_x86-64.tar.gz</span></div></pre></td></tr></table></figure><h3 id="解压"><a href="#解压" class="headerlink" title="解压:"></a>解压:</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -xzf seafile-server_*</div><div class="line">mv seafile-server-*/ seafile-server/</div></pre></td></tr></table></figure><h2 id="配置-Seafile"><a href="#配置-Seafile" class="headerlink" title="配置 Seafile"></a>配置 Seafile</h2><p>运行Seafile设置脚本，并回答预设问题：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd seafile-server*</div><div class="line">./setup-seafile-mysql.sh</div></pre></td></tr></table></figure><p>执行过程输入参数如下图：<br>其中：<br>[ This server’s ip or domain ] 字段输入服务器IP地址（111.111.111.111）。<br>mysql 的 [ root password ] 字段输入数据库密码。<br>其他字段一路回车使用默认值。</p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws3.sinaimg.cn/large/006tNc79ly1fhp0relpz6j30f90nxgp9.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><h2 id="启动-Seafile"><a href="#启动-Seafile" class="headerlink" title="启动 Seafile"></a>启动 Seafile</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">./seafile.sh start</div><div class="line">./seahub.sh start</div></pre></td></tr></table></figure><p>执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 <code>xxx@xxx.com</code><br>[ admin password ] 和 [ admin password again ] 设置为登录网盘的密码，如 <code>xxxxxxx</code></p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws3.sinaimg.cn/large/006tNc79ly1fhp0thvmy1j30gw06ywf8.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><h2 id="大功告成！"><a href="#大功告成！" class="headerlink" title="大功告成！"></a>大功告成！</h2><p>恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。<br>可以通过 IP 访问网盘：<a href="http://111.111.111.111:8000" target="_blank" rel="external">http://111.111.111.111:8000</a></p><p><em>注意</em><br>安装过程中会出现类似错误<br><code>error while loading shared libraries: libselinux.so.1: cannot open shared object file: No such file or directory</code></p><p>这是由于安装包与系统位不同导致的，64位系统要下载对应的64位的安装包</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-Seafile-服务器&quot;&gt;&lt;a href=&quot;#安装-Seafile-服务器&quot; class=&quot;headerlink&quot; title=&quot;安装 Seafile 服务器&quot;&gt;&lt;/a&gt;安装 Seafile 服务器&lt;/h2&gt;&lt;h3 id=&quot;安装依赖环境&quot;&gt;&lt;a href=&quot;#安装依赖环境&quot; class=&quot;headerlink&quot; title=&quot;安装依赖环境&quot;&gt;&lt;/a&gt;安装依赖环境&lt;/h3&gt;&lt;p&gt;在 Debian/Ubuntu 系统下，可以使用以下命令安装 MySQL：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get update&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install mysql-server&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用以下命令安装 Python 相关依赖：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install python2.7 python-setuptools python-imaging python-ldap python-mysqldb python-memcache python-urllib3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装 MySQL 过程需要为 MySQL 的 root 用户设置新密码，请记住该[密码]以供后面步骤使用。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网盘" scheme="http://blog.cuiyy.top/tags/%E7%BD%91%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>搭建FTP服务器</title>
    <link href="http://blog.cuiyy.top/2017/07/17/5ykC26xyTqYUFCqG/"/>
    <id>http://blog.cuiyy.top/2017/07/17/5ykC26xyTqYUFCqG/</id>
    <published>2017-07-17T12:10:11.000Z</published>
    <updated>2017-07-19T03:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装并启动-FTP-服务"><a href="#安装并启动-FTP-服务" class="headerlink" title="安装并启动 FTP 服务"></a>安装并启动 FTP 服务</h2><h3 id="安装-VSFTPD"><a href="#安装-VSFTPD" class="headerlink" title="安装 VSFTPD"></a>安装 VSFTPD</h3><p>使用 <code>apt-get</code> 安装 <code>vsftpd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vsftpd -y</div></pre></td></tr></table></figure><h3 id="启动-VSFTPD"><a href="#启动-VSFTPD" class="headerlink" title="启动 VSFTPD"></a>启动 VSFTPD</h3><p>安装完成后 VSFTPD 会自动启动，通过 <code>netstat</code> 命令可以看到系统已经监听了 21 端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo netstat -nltp | grep 21</div></pre></td></tr></table></figure><p>如果没有启动，可以手动开启 <code>VSFTPD</code> 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl start vsftpd.service</div></pre></td></tr></table></figure><a id="more"></a><h2 id="配置用户访问目录"><a href="#配置用户访问目录" class="headerlink" title="配置用户访问目录"></a>配置用户访问目录</h2><h3 id="新建用户主目录"><a href="#新建用户主目录" class="headerlink" title="新建用户主目录"></a>新建用户主目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/uftp</div></pre></td></tr></table></figure><p>执行完后，在这里 <code>/home/uftp</code></p><p>就能看到新建的文件夹 <code>uftp</code> 了。</p><h3 id="创建登录欢迎文件"><a href="#创建登录欢迎文件" class="headerlink" title="创建登录欢迎文件"></a>创建登录欢迎文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo touch /home/uftp/welcome.txt</div></pre></td></tr></table></figure><p>###新建用户 <code>uftp</code> 并设置密码<br>创建一个用户 <code>uftp</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo useradd -d /home/uftp -s /bin/bash uftp</div></pre></td></tr></table></figure><p>为用户 <code>uftp</code> 设置密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo passwd uftp</div></pre></td></tr></table></figure><p>删除掉 <code>pam.d</code> 中 <code>vsftpd</code>，因为该配置文件会导致使用用户名登录 <code>ftp</code> 失败：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo rm /etc/pam.d/vsftpd</div></pre></td></tr></table></figure><h2 id="限制该用户仅能通过-FTP-访问"><a href="#限制该用户仅能通过-FTP-访问" class="headerlink" title="限制该用户仅能通过 FTP 访问"></a>限制该用户仅能通过 FTP 访问</h2><p>限制用户 uftp 只能通过 FTP 访问服务器，而不能直接登录服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo usermod -s /sbin/nologin uftp</div></pre></td></tr></table></figure><p>修改 <code>vsftpd</code> 配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod a+w /etc/vsftpd.conf</div></pre></td></tr></table></figure><p>修改 <code>/etc/vsftpd.conf</code> 文件中的配置（直接将如下配置添加到配置文件最下方）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"># 限制用户对主目录以外目录访问</div><div class="line">chroot_local_user=YES</div><div class="line"></div><div class="line"># 指定一个 userlist 存放允许访问 ftp 的用户列表</div><div class="line">userlist_deny=NO</div><div class="line">userlist_enable=YES</div><div class="line"></div><div class="line"># 记录允许访问 ftp 用户列表</div><div class="line">userlist_file=/etc/vsftpd.user_list</div><div class="line"></div><div class="line"># 不配置可能导致莫名的530问题</div><div class="line">seccomp_sandbox=NO</div><div class="line"></div><div class="line"># 允许文件上传</div><div class="line">write_enable=YES</div><div class="line"></div><div class="line"># 使用utf8编码</div><div class="line">utf8_filesystem=YES</div></pre></td></tr></table></figure><h3 id="新建文件-etc-vsftpd-user-list，用于存放允许访问-ftp-的用户："><a href="#新建文件-etc-vsftpd-user-list，用于存放允许访问-ftp-的用户：" class="headerlink" title="新建文件 /etc/vsftpd.user_list，用于存放允许访问 ftp 的用户："></a>新建文件 <code>/etc/vsftpd.user_list</code>，用于存放允许访问 ftp 的用户：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo touch /etc/vsftpd.user_list</div><div class="line">sudo chmod a+w /etc/vsftpd.user_list</div></pre></td></tr></table></figure><p>修改 <code>/etc/vsftpd.user_list</code> ，加入刚刚创建的用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">vsftpd.user_list</div><div class="line">uftp</div></pre></td></tr></table></figure><h2 id="设置访问权限"><a href="#设置访问权限" class="headerlink" title="设置访问权限"></a>设置访问权限</h2><h3 id="设置主目录访问权限（只读）"><a href="#设置主目录访问权限（只读）" class="headerlink" title="设置主目录访问权限（只读）"></a>设置主目录访问权限（只读）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod a-w /home/uftp</div></pre></td></tr></table></figure><h3 id="新建公共目录，并设置权限（读写）"><a href="#新建公共目录，并设置权限（读写）" class="headerlink" title="新建公共目录，并设置权限（读写）"></a>新建公共目录，并设置权限（读写）</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mkdir /home/uftp/public &amp;&amp; sudo chmod 777 -R /home/uftp/public</div></pre></td></tr></table></figure><h3 id="重启vsftpd-服务："><a href="#重启vsftpd-服务：" class="headerlink" title="重启vsftpd 服务："></a>重启vsftpd 服务：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart vsftpd.service</div></pre></td></tr></table></figure><h2 id="访问-FTP-服务"><a href="#访问-FTP-服务" class="headerlink" title="访问 FTP 服务"></a>访问 FTP 服务</h2><p>FTP 服务已安装并配置完成，下面我们来使用该 FTP 服务访问 FTP 服务<br>根据您个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务</p><p>###通过 FTP 客户端工具访问<br>FTP 客户端工具众多，下面推荐两个常用的：<br>FileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac<br>WinSCP - Windows 下的 FTP 和 SFTP 连接客户端<br>下载和安装 FTP 客户端后，使用下面的凭据进行连接即可：<br>主机 111.111.111.11<br>用户：uftp</p><p>输入密码后，如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！<br>接下来，请上传任意一张图片到您的 FTP 服务器上的 <code>uftp</code> 的 <code>public</code> 目录下，然后，就可以在 <code>/home/uftp/public</code> 中看到了。</p><p>###通过 Windows 资源管理器访问<br>Windows 用户可以复制下面的链接<br>到资源管理器的地址栏访问：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ftp://uftp:你的密码@111.111.111.11</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装并启动-FTP-服务&quot;&gt;&lt;a href=&quot;#安装并启动-FTP-服务&quot; class=&quot;headerlink&quot; title=&quot;安装并启动 FTP 服务&quot;&gt;&lt;/a&gt;安装并启动 FTP 服务&lt;/h2&gt;&lt;h3 id=&quot;安装-VSFTPD&quot;&gt;&lt;a href=&quot;#安装-VSFTPD&quot; class=&quot;headerlink&quot; title=&quot;安装 VSFTPD&quot;&gt;&lt;/a&gt;安装 VSFTPD&lt;/h3&gt;&lt;p&gt;使用 &lt;code&gt;apt-get&lt;/code&gt; 安装 &lt;code&gt;vsftpd&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install vsftpd -y&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;启动-VSFTPD&quot;&gt;&lt;a href=&quot;#启动-VSFTPD&quot; class=&quot;headerlink&quot; title=&quot;启动 VSFTPD&quot;&gt;&lt;/a&gt;启动 VSFTPD&lt;/h3&gt;&lt;p&gt;安装完成后 VSFTPD 会自动启动，通过 &lt;code&gt;netstat&lt;/code&gt; 命令可以看到系统已经监听了 21 端口&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo netstat -nltp | grep 21&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果没有启动，可以手动开启 &lt;code&gt;VSFTPD&lt;/code&gt; 服务：&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo systemctl start vsftpd.service&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="FTP" scheme="http://blog.cuiyy.top/tags/FTP/"/>
    
  </entry>
  
  <entry>
    <title>nodejs http.request 设置超时</title>
    <link href="http://blog.cuiyy.top/2017/06/23/ujZ8WMuDA7TISLvv/"/>
    <id>http://blog.cuiyy.top/2017/06/23/ujZ8WMuDA7TISLvv/</id>
    <published>2017-06-23T13:19:11.000Z</published>
    <updated>2017-06-26T03:43:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>nodejs</code>在请求第三方接口的时候，经常会用到<code>http.request()</code>方法；为了防止请求等待时间过长，我们可以为其设置超时时间。<br><a id="more"></a><br>在请求参数中添加<code>timeout</code>参数<br>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"><span class="keyword">var</span> options = &#123; </div><div class="line">    hostname: <span class="string">'127.0.0'</span>, </div><div class="line">    port: <span class="number">8080</span>, </div><div class="line">    path: <span class="string">'/x'</span>, </div><div class="line">    method: <span class="string">'GET'</span>,</div><div class="line">    timeout: <span class="number">500</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">    res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123; </div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'BODY: '</span> + chunk); </div><div class="line">    &#125;);</div><div class="line">    res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'请求完成'</span>);</div><div class="line">    &#125;);</div><div class="line">    res.on(<span class="string">'timeout'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'请求超时'</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line">req.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123; </div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'请求失败: '</span> + e.message); </div><div class="line">&#125;);</div><div class="line">req.end();</div></pre></td></tr></table></figure><p>请求超过500毫秒后，会终止请求，同时触发<code>timeout</code>事件，我们可以监听此事件，在请求超时后做一些处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用&lt;code&gt;nodejs&lt;/code&gt;在请求第三方接口的时候，经常会用到&lt;code&gt;http.request()&lt;/code&gt;方法；为了防止请求等待时间过长，我们可以为其设置超时时间。&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nodejs" scheme="http://blog.cuiyy.top/tags/nodejs/"/>
    
      <category term="http" scheme="http://blog.cuiyy.top/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>browsersync 省时的浏览器同步测试工具</title>
    <link href="http://blog.cuiyy.top/2017/06/23/Tve7kc4flBoVIhdF/"/>
    <id>http://blog.cuiyy.top/2017/06/23/Tve7kc4flBoVIhdF/</id>
    <published>2017-06-23T01:58:32.000Z</published>
    <updated>2017-06-23T02:42:16.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。<br>更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。<br>您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。<br>无论您是前端还是后端工程师，使用它将提高您30%的工作效率。</p></blockquote><a id="more"></a><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="http://www.browsersync.cn/img/sync-demo.gif" alt="" title=""> </div> <div class="image-caption"></div> </figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><h4 id="安装browsersync"><a href="#安装browsersync" class="headerlink" title="安装browsersync"></a>安装browsersync</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g browser-sync</div></pre></td></tr></table></figure><h3 id="启动-BrowserSync"><a href="#启动-BrowserSync" class="headerlink" title="启动 BrowserSync"></a>启动 BrowserSync</h3><h4 id="静态网站"><a href="#静态网站" class="headerlink" title="静态网站"></a>静态网站</h4><p>如果您想要监听.css文件, 您需要使用服务器模式。 BrowserSync 将启动一个小型服务器，并提供一个URL来查看您的网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">browser-sync start --server --files <span class="string">"css/*.css"</span></div></pre></td></tr></table></figure></p><p><code>--files</code> 路径是相对于运行该命令的项目（目录） </p><p>如果您需要监听多个类型的文件，您只需要用逗号隔开。例如我们再加入一个.html文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># --files 路径是相对于运行该命令的项目（目录） </span></div><div class="line">browser-sync start --server --files <span class="string">"css/*.css, *.html"</span></div><div class="line"><span class="comment"># 如果你的文件层级比较深，您可以考虑使用 **（表示任意目录）匹配，任意目录下任意.css 或 .html文件。 </span></div><div class="line">browser-sync start --server --files <span class="string">"**/*.css, **/*.html"</span></div></pre></td></tr></table></figure><h4 id="动态网站"><a href="#动态网站" class="headerlink" title="动态网站"></a>动态网站</h4><p>如果您已经有其他本地服务器环境PHP或类似的，您需要使用代理模式。 BrowserSync将通过代理URL(localhost:3000)来查看您的网站。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 主机名可以是ip或域名</span></div><div class="line"><span class="comment"># --port 指定代理端口</span></div><div class="line">browser-sync start --proxy <span class="string">"127.0.0.1:8080"</span> --port 3001 --files <span class="string">"css/*.css"</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Browsersync能让浏览器实时、快速响应您的文件更改（html、js、css、sass、less等）并自动刷新页面。&lt;br&gt;更重要的是 Browsersync可以同时在PC、平板、手机等设备下进项调试。&lt;br&gt;您可以想象一下：“假设您的桌子上有pc、ipad、iphone、android等设备，同时打开了您需要调试的页面，当您使用browsersync后，您的任何一次代码保存，以上的设备都会同时显示您的改动”。&lt;br&gt;无论您是前端还是后端工程师，使用它将提高您30%的工作效率。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nodejs" scheme="http://blog.cuiyy.top/tags/nodejs/"/>
    
      <category term="自动化" scheme="http://blog.cuiyy.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>nodemon</title>
    <link href="http://blog.cuiyy.top/2017/06/20/Ga3g8f89sQ1zEnJ9/"/>
    <id>http://blog.cuiyy.top/2017/06/20/Ga3g8f89sQ1zEnJ9/</id>
    <published>2017-06-20T08:40:13.000Z</published>
    <updated>2017-06-20T11:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.npmjs.com/package/nodemon" target="_blank" rel="external">nodemon</a>将监视启动nodemon的目录中的文件，如果任何文件更改，nodemon将自动重新启动node应用程序。</p><p><figure class="image-bubble"> <div class="img-lightbox"> <div class="overlay"></div> <img src="https://ws4.sinaimg.cn/large/006tKfTcly1fgrtvlh5b7j307g08iglq.jpg" alt="" title=""> </div> <div class="image-caption"></div> </figure><br><a id="more"></a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g nodemon</div></pre></td></tr></table></figure><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon [your node app]</div></pre></td></tr></table></figure><p>使用nodemon很简单，如果我的应用程序接受主机和端口作为参数，可以这样使用:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon ./server.js localhost 8080</div></pre></td></tr></table></figure><p>nodemon还支持运行和监视coffee脚本应用程序：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon server.coffee</div></pre></td></tr></table></figure><p>启用调试</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nodemon --debug ./server.js 80</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/nodemon&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;nodemon&lt;/a&gt;将监视启动nodemon的目录中的文件，如果任何文件更改，nodemon将自动重新启动node应用程序。&lt;/p&gt;
&lt;p&gt;&lt;figure class=&quot;image-bubble&quot;&gt; &lt;div class=&quot;img-lightbox&quot;&gt; &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt; &lt;img src=&quot;https://ws4.sinaimg.cn/large/006tKfTcly1fgrtvlh5b7j307g08iglq.jpg&quot; alt=&quot;&quot; title=&quot;&quot;&gt; &lt;/div&gt; &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt; &lt;/figure&gt;&lt;br&gt;
    
    </summary>
    
      <category term="技术" scheme="http://blog.cuiyy.top/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nodejs" scheme="http://blog.cuiyy.top/tags/nodejs/"/>
    
      <category term="自动化" scheme="http://blog.cuiyy.top/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
</feed>
